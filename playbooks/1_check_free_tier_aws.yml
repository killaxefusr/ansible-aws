---
- name: Check AWS Free Tier usage for EC2, EBS, S3, Data Transfer, Elastic IP, and KMS
  hosts: localhost
  gather_facts: false
  vars_files:
    - "../host_vars/all.yml"
    - "../host_vars/custom_date_time.yml"
  tasks:
    - name: Get Free Tier usage details
      shell: |
        aws freetier get-free-tier-usage --query "freeTierUsages[].[service, usageType, actualUsageAmount, forecastedUsageAmount, limit]" --output json
      register: free_tier_usage
      changed_when: false
    - name: Parse and structure Free Tier usage data
      set_fact:
        free_tier_data: "{{ free_tier_usage.stdout | from_json }}"
    - name: Check for empty Free Tier usage data
      fail:
        msg: |
          No Free Tier usage data available. Ensure your AWS Free Tier account is active and has usage data. (Also this can be in first days of new month).
          Check https://console.aws.amazon.com/billing/home#/freetier and re-run without this tag if necessary.
      when: free_tier_data | length == 0
    - name: Initialize exceeded_usages list
      set_fact:
        exceeded_usages: []
    - name: Check each service usage, record if limit exceeded or untracked
      block:
        - name: Check EC2 Instance Hours (t2.micro) Free Tier limit (+4 hours)
          set_fact:
            exceeded_usages: "{{ exceeded_usages + [{'service': item[0], 'usageType': item[1], 'actual': item[2], 'forecasted': item[3], 'limit': item[4]}] }}"
          loop: "{{ free_tier_data }}"
          when: item[0] == 'Amazon Elastic Compute Cloud' and item[1] == 'BoxUsage:freetier.micro' and (item[2] | float + 4 > item[4] | float or item[3] | float + 4 > item[4] | float)
          ignore_errors: true
        - name: Check EBS Storage Free Tier limit (+16 GB)
          set_fact:
            exceeded_usages: "{{ exceeded_usages + [{'service': item[0], 'usageType': item[1], 'actual': item[2], 'forecasted': item[3], 'limit': item[4]}] }}"
          loop: "{{ free_tier_data }}"
          when: item[0] == 'Amazon Elastic Compute Cloud' and item[1] == 'EBS:VolumeUsage' and (item[2] | float + 16 > item[4] | float or item[3] | float + 16 > item[4] | float)
          ignore_errors: true
        - name: Check Public IP Hours Free Tier limit (+4 hours)
          set_fact:
            exceeded_usages: "{{ exceeded_usages + [{'service': item[0], 'usageType': item[1], 'actual': item[2], 'forecasted': item[3], 'limit': item[4]}] }}"
          loop: "{{ free_tier_data }}"
          when: item[0] == 'Amazon Virtual Private Cloud' and item[1] == 'PublicIPv4:InUseAddress' and (item[2] | float + 4 > item[4] | float or item[3] | float + 4 > item[4] | float)
          ignore_errors: true
        - name: Check AWS Data Transfer Free Tier limit (DataTransfer-Out-Bytes) (+0.5 GB)
          set_fact:
            exceeded_usages: "{{ exceeded_usages + [{'service': item[0], 'usageType': item[1], 'actual': item[2], 'forecasted': item[3], 'limit': item[4]}] }}"
          loop: "{{ free_tier_data }}"
          when: item[0] == 'AWS Data Transfer' and item[1] == 'DataTransfer-Out-Bytes' and (item[2] | float + 0.25 > item[4] | float or item[3] | float + 0.25 > item[4] | float)
          ignore_errors: true
        - name: Check S3 Timed Storage Free Tier limit (+0.25 GB)
          set_fact:
            exceeded_usages: "{{ exceeded_usages + [{'service': item[0], 'usageType': item[1], 'actual': item[2], 'forecasted': item[3], 'limit': item[4]}] }}"
          loop: "{{ free_tier_data }}"
          when: item[0] == 'Amazon Simple Storage Service' and item[1] == 'TimedStorage-ByteHrs' and (item[2] | float + 0.25 > item[4] | float or item[3] | float + 0.25 > item[4] | float)
          ignore_errors: true
        - name: Check S3 Requests (Tier 1 and Tier 2) Free Tier limits (+5 requests)
          set_fact:
            exceeded_usages: "{{ exceeded_usages + [ {'service': item[0], 'usageType': item[1], 'actual': item[2], 'forecasted': item[3], 'limit': item[4]} ] }}"
          loop: "{{ free_tier_data }}"
          when: item[0] == 'Amazon Simple Storage Service' and (item[1] == 'Requests-Tier1' or item[1] == 'Requests-Tier2') and (item[2] | float + 5 > item[4] | float or item[3] | float + 5 > item[4] | float)

        - name: Check AWS Data Transfer Free Tier limit (DataTransfer-Regional-Bytes) (+0.25 GB)
          set_fact:
            exceeded_usages: "{{ exceeded_usages + [{'service': item[0], 'usageType': item[1], 'actual': item[2], 'forecasted': item[3], 'limit': item[4]}] }}"
          loop: "{{ free_tier_data }}"
          when: item[0] == 'AWS Data Transfer' and item[1] == 'DataTransfer-Regional-Bytes' and (item[2] | float + 0.25 > item[4] | float or item[3] | float + 0.25 > item[4] | float)
          ignore_errors: true

    - name: Notify for services without usage data
      debug:
        msg: "No usage data found for service {{ missing_service }} this month."
      loop:
        - "Amazon Elastic Compute Cloud"
        - "Amazon Virtual Private Cloud"
        - "Amazon Simple Storage Service"
        - "AWS Data Transfer"
      loop_control:
        loop_var: missing_service
      when: missing_service not in (free_tier_data | map(attribute=0) | list)
    - name: Log exceeded Free Tier limits to a logfile
      lineinfile:
        path: "{{ log_file_path }}"
        line: "{{ custom_date_time }}:No usage data found for service {{ missing_service }} this month"
        insertafter: "EOF"
      loop:
        - "Amazon Elastic Compute Cloud"
        - "Amazon Virtual Private Cloud"
        - "Amazon Simple Storage Service"
        - "AWS Data Transfer"
      loop_control:
        loop_var: missing_service
      when: "('free_tier_check' in ansible_run_tags and 'log' in ansible_run_tags) and (missing_service not in (free_tier_data | map(attribute=0) | list))"
      tags:
        - log
        - never

    - name: Output exceeded usage notifications
      fail:
        msg: >
          The following Free Tier limits have been exceeded or are at risk of exceedance:
          {% for usage in exceeded_usages %}
          - Service: {{ usage.service }}, UsageType: {{ usage.usageType }},
            Actual Usage: {{ usage.actual }}, Forecasted Usage: {{ usage.forecasted }},
            Limit: {{ usage.limit }}
          {% endfor %}
      when: exceeded_usages | length > 0
    - name: Log exceeded Free Tier limits to a logfile
      blockinfile:
        path: "{{ log_file_path }}"
        block: |
          {{ custom_date_time }}:The following Free Tier limits have been exceeded or are at risk of exceedance:
          {% for usage in exceeded_usages %}
          - {{ custom_date_time }}:Service: {{ usage.service }}, UsageType: {{ usage.usageType }},
            Actual Usage: {{ usage.actual }}, Forecasted Usage: {{ usage.forecasted }},
            Limit: {{ usage.limit }}
          {% endfor %}
        insertafter: "EOF"
      when: "('free_tier_check' in ansible_run_tags and 'log' in ansible_run_tags) and (exceeded_usages | length > 0)"
      tags:
        - log
        - never

    - name: Msg successful checks for services without exceeding limits
      debug:
        msg: "All checks passed for {{ service }}. No Free Tier limit exceeded."
      loop: "{{ free_tier_data | map(attribute=0) | list | unique }}"
      loop_control:
        loop_var: service
      when: "('free_tier_check' in ansible_run_tags) and (service not in (exceeded_usages | map(attribute='service') | list))"
    - name: Log successful checks to logfile
      lineinfile:
        path: "{{ log_file_path }}"
        line: "{{ custom_date_time }}:All checks passed for {{ service }}. No Free Tier limit exceeded."
        insertafter: "EOF"
      loop: "{{ free_tier_data | map(attribute=0) | list | unique }}"
      loop_control:
        loop_var: service
      when: "('free_tier_check' in ansible_run_tags and 'log' in ansible_run_tags) and (service not in (exceeded_usages | map(attribute='service') | list))"
      tags:
        - log
        - never
